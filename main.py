import os
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "8378889437:AAGRVHAnH690fDmanXxQdme837Z0B6jiR9g"
ADMIN_IDS = [8312135656, 1637959612]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤
INVITE_LINK = "–ø–æ—Ç–æ–º –ø–æ—Å—Ç–∞–≤–ª—é"  # –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# Callback data –∫–ª–∞—Å—Å—ã
class FormCallback:
    APPLY = "apply"
    CASTE = "caste_"
    ADMIN_ACCEPT = "admin_accept"
    ADMIN_REJECT = "admin_reject"
    CANCEL = "cancel"

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class Form(StatesGroup):
    waiting_nickname = State()
    waiting_experience = State()
    waiting_year = State()
    waiting_caste = State()

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ø–∞–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data=FormCallback.APPLY)
    builder.button(text="–æ—Ç–º–µ–Ω–∞", callback_data=FormCallback.CANCEL)
    builder.adjust(1)
    return builder.as_markup()

def get_caste_keyboard():
    builder = InlineKeyboardBuilder()
    castes = [
        "–°–Ω–æ—Å", 
        "–î–æ–∫—Å", 
        "–û—Å–∏–Ω—Ç", 
        "–°–≤–∞—Ç", 
        "–¢—Ä–æ–ª—å", 
        "–î—Ä—É–≥–æ–µ"
    ]
    for caste in castes:
        builder.button(text=caste, callback_data=f"{FormCallback.CASTE}{caste.split()[1]}")
    builder.button(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data=FormCallback.CANCEL)
    builder.adjust(2)
    return builder.as_markup()

def get_admin_keyboard(user_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data=f"{FormCallback.ADMIN_ACCEPT}_{user_id}")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"{FormCallback.ADMIN_REJECT}_{user_id}")
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    try:
        photo = InputFile("start.jpg")
        await message.answer_photo(
            photo=photo,
            caption="–ü—Ä–∏–≤–µ—Ç!\n\n–ü–æ–¥–∞–π –∑–∞—è–≤–∫—É –≤ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–ª–∞–Ω **–õ–µ–≥–∏–æ–Ω –ó–∞—â–∏—Ç—ã**!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ª—É—á—à–∏–º",
            reply_markup=get_start_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    except FileNotFoundError:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç–∞\n\n–ü–æ–¥–∞–π –∑–∞—è–≤–∫—É –≤ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–ª–∞–Ω **–õ–µ–≥–∏–æ–Ω –ó–∞—â–∏—Ç—ã**\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ª—É—á—à–∏–º",
            reply_markup=get_start_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data == FormCallback.CANCEL)
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå\n\nüîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ",
        reply_markup=None
    )
    await callback.answer("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ üö´")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
@router.callback_query(F.data == FormCallback.APPLY)
async def process_apply(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.waiting_nickname)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é –ª–∏–∫—É –≤ –∫–º: \n\nüìõ –ü—Ä–∏–º–µ—Ä: –¥–∞–ª–±–∞–µ–±228",
        reply_markup=None
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞
@router.message(Form.waiting_nickname)
async def process_nickname(message: Message, state: FSMContext):
    if len(message.text) > 50:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—à–æ–π! !!–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå")
        return
        
    await state.update_data(nickname=message.text)
    await state.set_state(Form.waiting_experience)
    await message.answer(
        "üìñ –¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ: \n\n"
        "üíº –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö üíº\n"
        "‚≠ê –ß–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –∫–ª–∞–Ω—É? ‚≠ê"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø—ã—Ç–∞
@router.message(Form.waiting_experience)
async def process_experience(message: Message, state: FSMContext):
    if len(message.text) < 10:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚ùå")
        return
        
    await state.update_data(experience=message.text)
    await state.set_state(Form.waiting_year)
    await message.answer(
        "üìÖ –° –∫–∞–∫–æ–≥–æ –≥–æ–¥–∞ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ö–ú? \n\n"
        "üóìÔ∏è –ü—Ä–∏–º–µ—Ä: 2020, 2018, 2022 üóìÔ∏è\n"
        "—É–∫–∞–∑—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á—Ç–æ –±—ã —è –Ω–µ –µ–±–∞–ª—Å—è —Å —ç—Ç–∏–º"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ–¥–∞
@router.message(Form.waiting_year)
async def process_year(message: Message, state: FSMContext):
    await state.update_data(year=message.text)
    await state.set_state(Form.waiting_caste)
    await message.answer(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∫–∞—Å—Ç—É: \n\n"
        "üè∑Ô∏è –£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–º üè∑Ô∏è",
        reply_markup=get_caste_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Å—Ç—ã
@router.callback_query(F.data.startswith(FormCallback.CASTE))
async def process_caste(callback: CallbackQuery, state: FSMContext):
    caste = callback.data.replace(FormCallback.CASTE, "")
    await state.update_data(caste=caste)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_message = (
        f"üéØ **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –õ–µ–≥–∏–æ–Ω –ó–∞—â–∏—Ç—ã!** üéØ\n\n"
        f"üë§ **–ù–∏–∫:** {data['nickname']}\n"
        f"üìñ **–û–ø—ã—Ç:** {data['experience']}\n"
        f"üìÖ **–í –ö–ú —Å:** {data['year']}\n"
        f"üè∑Ô∏è **–ö–∞—Å—Ç–∞:** {caste}\n\n"
        f"üÜî **ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {callback.from_user.id}\n"
        f"üëÅÔ∏è **Username:** @{callback.from_user.username if callback.from_user.username else '–ù–µ—Ç'}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                admin_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_admin_keyboard(callback.from_user.id)
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await callback.message.edit_text(
        "‚úÖ **–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!** ‚úÖ\n\n"
        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π ‚è≥\n"
        "üìß –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏ üìß",
        parse_mode=ParseMode.MARKDOWN
    )
    await state.clear()
    await callback.answer(f"üéâ –ö–∞—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {caste} üéâ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º
@router.callback_query(F.data.startswith(FormCallback.ADMIN_ACCEPT))
async def process_admin_accept(callback: CallbackQuery):
    user_id = int(callback.data.split('_')[-1])
    
    try:
        await bot.send_message(
            user_id,
            "üéâ **–≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!** üéâ\n\n"
            "üõ°Ô∏è –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –ø—Ä–≤–æ–µ—Ä–∫—É üõ°Ô∏è\n\n"
            f"üîó –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {INVITE_LINK}\n"
            "‚öîÔ∏è –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –æ–±—É—á–µ–Ω–∏—è ‚öîÔ∏è\n\n"
            "—É–¥–∞—á–∏",
            parse_mode=ParseMode.MARKDOWN
        )
        await callback.message.edit_text(
            f"‚úÖ **–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!** ‚úÖ\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üìß",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!** ‚ùå\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚ö†Ô∏è",
            parse_mode=ParseMode.MARKDOWN
        )
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º
@router.callback_query(F.data.startswith(FormCallback.ADMIN_REJECT))
async def process_admin_reject(callback: CallbackQuery):
    user_id = int(callback.data.split('_')[-1])
    
    try:
        await bot.send_message(
            user_id,
            "‚ùå **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.** ‚ùå\n\n"
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.\n"
            "üìã –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –æ–ø—ã—Ç–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
            "üîÑ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è üîÑ\n"
            "üí™ –£–ª—É—á—à–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üí™",
            parse_mode=ParseMode.MARKDOWN
        )
        await callback.message.edit_text(
            f"‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞** ‚ùå\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üìß",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞** ‚ùå\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"‚ö†Ô∏è –ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚ö†Ô∏è",
            parse_mode=ParseMode.MARKDOWN
        )
    
    await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –≤ FSM
@router.message(StateFilter(None))
async def handle_other_messages(message: Message):
    await message.answer(
        "ü§ñ **–õ–µ–≥–∏–æ–Ω –ó–∞—â–∏—Ç—ã –ë–æ—Ç** ü§ñ\n\n"
        "üõ°Ô∏è –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start üõ°Ô∏è\n\n"
        "‚öîÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–º—É –∫–ª–∞–Ω—É! ‚öîÔ∏è",
        parse_mode=ParseMode.MARKDOWN
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
