import os
import asyncio
import logging
import random
import re
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder

from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from telethon.tl.types import MessageService
from telethon import events
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import InputReportReasonSpam, InputReportReasonViolence, InputReportReasonOther

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8218868922:AAED40palWhHPhqcb3NgjdlHUHGty5tY360"
API_ID = 13689314
API_HASH = "809d211f8457b863286b8a8c58977b1b"

ADMIN_IDS = [7246667404]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

user_sessions = {}
active_userbots = {}
user_phones = {}
auto_mode = False  # –†–µ–∂–∏–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
last_activity = {}

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class AuthStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()

class UserSession:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.phone = None
        self.phone_code_hash = None
        self.client = None
        self.is_authenticated = False
        self.session_name = f"sessions/session_{user_id}"
        
        os.makedirs("sessions", exist_ok=True)
    
    async def send_code(self, phone: str):
        self.phone = phone
        self.client = TelegramClient(self.session_name, API_ID, API_HASH)
        await self.client.connect()
        
        sent_code = await self.client.send_code_request(phone)
        self.phone_code_hash = sent_code.phone_code_hash
        return True
    
    async def sign_in(self, code: str):
        try:
            await self.client.sign_in(
                phone=self.phone,
                code=code,
                phone_code_hash=self.phone_code_hash
            )
            self.is_authenticated = True
            return True, None
        except SessionPasswordNeededError:
            return False, "password"
        except PhoneCodeInvalidError:
            return False, "invalid_code"
        except Exception as e:
            return False, str(e)
    
    async def sign_in_with_password(self, password: str):
        try:
            await self.client.sign_in(password=password)
            self.is_authenticated = True
            return True
        except Exception as e:
            return False, str(e)
    
    async def disconnect(self):
        if self.client:
            await self.client.disconnect()
            self.client = None

async def extract_message_info(link: str, client: TelegramClient):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ —Å—Å—ã–ª–∫–∏"""
    try:
        # –§–æ—Ä–º–∞—Ç: https://t.me/c/1234567890/123 –∏–ª–∏ https://t.me/username/123
        if "t.me/c/" in link:
            parts = link.split("/")
            chat_id = int(parts[4])
            message_id = int(parts[5])
            return chat_id, message_id
        elif "t.me/" in link:
            parts = link.split("/")
            username = parts[3]
            message_id = int(parts[4])
            # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ username
            entity = await client.get_entity(username)
            return entity.id, message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å—Å—ã–ª–∫–∏: {e}")
    return None, None

async def send_reports(client: TelegramClient, chat_id: int, message_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∞–ª–æ–±—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    reasons = [
        InputReportReasonSpam(),
        InputReportReasonViolence(),
        InputReportReasonOther()
    ]
    
    successful = random.randint(60, 100)
    failed = random.randint(1, 10)
    floods = random.randint(0, 2)
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
    for i in range(successful + failed):
        try:
            if i < successful:
                reason = random.choice(reasons)
                await client(ReportRequest(
                    peer=await client.get_input_entity(chat_id),
                    id=[message_id],
                    reason=reason,
                    message=""
                ))
            await asyncio.sleep(random.uniform(0.5, 1.5))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã: {e}")
    
    return successful, failed, floods

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="connect_bot")
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∂–∞–ª–æ–± –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∫ —Ç–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data == "connect_bot")
async def connect_bot(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789):")
    await state.set_state(AuthStates.waiting_for_phone)
    await callback.answer()

@dp.message(AuthStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    
    if not phone.startswith('+') or not phone[1:].isdigit() or len(phone) < 10:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789):")
        return
    
    user_id = message.from_user.id
    
    user_session = UserSession(user_id)
    user_sessions[user_id] = user_session
    
    try:
        await user_session.send_code(phone)
        user_phones[user_id] = phone
        
        await message.answer("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:")
        await state.set_state(AuthStates.waiting_for_code)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@dp.message(AuthStates.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    user_id = message.from_user.id
    
    if user_id not in user_sessions:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        await state.clear()
        return
    
    user_session = user_sessions[user_id]
    
    try:
        success, error = await user_session.sign_in(code)
        
        if success:
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
            
            asyncio.create_task(run_userbot(user_session.client, user_id))
            
            active_userbots[user_id] = user_session
            await state.clear()
            
        elif error == "password":
            await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
            await state.set_state(AuthStates.waiting_for_password)
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@dp.message(AuthStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    user_id = message.from_user.id
    
    if user_id not in user_sessions:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        await state.clear()
        return
    
    user_session = user_sessions[user_id]
    
    try:
        success, error = await user_session.sign_in_with_password(password)
        
        if success:
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
            
            asyncio.create_task(run_userbot(user_session.client, user_id))
            
            active_userbots[user_id] = user_session
            await state.clear()
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
            await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

async def run_userbot(client, user_id):
    @client.on(events.NewMessage)
    async def handler(event):
        global auto_mode
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if isinstance(event.message, MessageService) or event.message.out:
            return
        
        message_text = event.message.text or ""
        chat_id = event.chat_id
        
        # –ö–æ–º–∞–Ω–¥–∞ .snos [—Å—Å—ã–ª–∫–∞]
        if message_text.startswith('.snos '):
            try:
                link = message_text.split(' ', 1)[1].strip()
                await event.reply("üîÑ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –∂–∞–ª–æ–±... –û–∂–∏–¥–∞–π—Ç–µ 40-60 —Å–µ–∫—É–Ω–¥ ‚è≥")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                target_chat_id, target_message_id = await extract_message_info(link, client)
                
                if target_chat_id and target_message_id:
                    # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await asyncio.sleep(random.randint(40, 60))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—ã
                    successful, failed, floods = await send_reports(client, target_chat_id, target_message_id)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                    report = f"""‚úÖ **–û—Ç—á–µ—Ç –æ –∂–∞–ª–æ–±–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!**

üéØ –¶–µ–ª—å:–≥ {link}
‚úÖ –£—Å–ø–µ—à–Ω {successful} 
‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {failed} 
‚ö° –§–ª—É–¥–æ–≤: {floods} 

üìä –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{successful + failed} –∂–∞–ª–æ–± –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"""

                    await event.reply(report)
                else:
                    await event.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üö´")
                    
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)} üö´")
        
        # –ö–æ–º–∞–Ω–¥–∞ .doks
        elif message_text == '.doks':
            await event.reply("üõ†Ô∏è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... \n\n_–µ—Å–ª–∏ —á–æ —è –µ–µ –Ω–µ –¥–æ–±–∞–≤–ª.—é –º–Ω–µ –ª–µ–Ω—å_")
        
        # –ö–æ–º–∞–Ω–¥–∞ .auto
        elif message_text == '.auto':
            auto_mode = True
            await event.reply("–°–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω \n\n_–Ø –±—É–¥—É —Å–ø–∞—Ç—å _")
        
        # –ö–æ–º–∞–Ω–¥–∞ .offauto
        elif message_text == '.offauto':
            auto_mode = False
            await event.reply("–°–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω \n\n_—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –∂–∞–±—ã_")
        
        # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤ —Å–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        elif auto_mode:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞—â–∞—é—Ç—Å—è –ª–∏ –∫ –±–æ—Ç—É
            sender = await event.get_sender()
            me = await client.get_me()
            
            # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç "—Å—É—Å–ª–∏–∫" –∏–ª–∏ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if ("—Å—É—Å–ª–∏–∫" in message_text.lower() or 
                (event.message.reply_to_msg_id and event.message.reply_to_msg_id == me.id) or
                (sender and sender.mentioned)):
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
                now = datetime.now()
                last_time = last_activity.get(chat_id)
                
                if not last_time or (now - last_time) > timedelta(seconds=30):
                    await event.reply("ü§¨ –î–∞–ª–±–∞–µ–±, –∑–∞–µ–±–∞–ª! –Ø —Å–ø–ª—é! üò¥")
                    last_activity[chat_id] = now
    
    try:
        await client.start()
        logger.info(f"Userbot –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–ø—É—â–µ–Ω")
        await client.run_until_disconnected()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ userbot: {e}")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
