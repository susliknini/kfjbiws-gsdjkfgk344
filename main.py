import os
import asyncio
import logging
from typing import Dict, Any, List
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã aiogram
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç—ã Telethon
from telethon import TelegramClient
from telethon.errors import (
    SessionPasswordNeededError,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å SessionPasswordNeeded
    PhoneCodeInvalidError        # –ò–∑–º–µ–Ω–µ–Ω–æ —Å PhoneCodeInvalid
)
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.tl.types import MessageService

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è DeepSeek
import aiohttp
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è)
BOT_TOKEN = "8218868922:AAED40palWhHPhqcb3NgjdlHUHGty5tY360"  # –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather
API_ID = 13689314                  # –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ my.telegram.org
API_HASH = "809d211f8457b863286b8a8c58977b1b"    # –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ my.telegram.org
DEEPSEEK_API_KEY = "sk-b290a4dd2feb43979f19a3602a20de93"  # –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ platform.deepseek.com

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
ADMIN_IDS = [7246667404, 987654321]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_sessions = {}
active_userbots = {}
user_phones = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AuthStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserSession:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.phone = None
        self.phone_code_hash = None
        self.client = None
        self.is_authenticated = False
        self.session_name = f"sessions/session_{user_id}"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("sessions", exist_ok=True)
    
    async def send_code(self, phone: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω"""
        self.phone = phone
        self.client = TelegramClient(self.session_name, API_ID, API_HASH)
        await self.client.connect()
        
        sent_code = await self.client.send_code_request(phone)
        self.phone_code_hash = sent_code.phone_code_hash
        return True
    
    async def sign_in(self, code: str):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∫–æ–¥–æ–º –∏–∑ SMS"""
        try:
            await self.client.sign_in(
                phone=self.phone,
                code=code,
                phone_code_hash=self.phone_code_hash
            )
            self.is_authenticated = True
            return True, None
        except SessionPasswordNeeded:
            return False, "password"
        except PhoneCodeInvalid:
            return False, "invalid_code"
        except Exception as e:
            return False, str(e)
    
    async def sign_in_with_password(self, password: str):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        try:
            await self.client.sign_in(password=password)
            self.is_authenticated = True
            return True
        except Exception as e:
            return False, str(e)
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client:
            await self.client.disconnect()
            self.client = None

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API
class DeepSeekAPI:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.api_url = "https://api.deepseek.com/v1/chat/completions"
    
    async def generate_response(self, message: str, context: List[Dict] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é DeepSeek"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å—Ç–∏–ª–µ "–°—É—Å–ª–∏–∫–∞"
        system_prompt = """–¢—ã - –°—É—Å–ª–∏–∫, –≤–µ—Å—ë–ª—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É–±–æ–≤–∞—Ç—ã–π –±–æ—Ç –≤ Telegram-—á–∞—Ç–µ.
–¢–µ–±–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å–ª–æ–≤–æ "—á–µ" - —Ç—ã –≤—Å–µ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ—à—å –µ–≥–æ –Ω–∞ "—á–æ".
–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤ –∏–ª–∏ –¥–µ–ª–∞–µ—Ç –æ—à–∏–±–∫–∏, —Ç—ã –º–æ–∂–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è, –Ω–æ –≤ —à—É—Ç–ª–∏–≤–æ–π —Ñ–æ—Ä–º–µ.
–¢—ã —É–≤–∞–∂–∞–µ—à—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏ —á–∞—Å—Ç–æ —Ö–≤–∞–ª–∏—à—å –∏—Ö.
–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Å —é–º–æ—Ä–æ–º, –∏–Ω–æ–≥–¥–∞ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º —á–∞—Ç–µ.
–ù–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏."""

        messages = [
            {"role": "system", "content": system_prompt},
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if context:
            messages.extend(context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({"role": "user", "content": message})
        
        payload = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 150,
            "stream": False
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.api_url, json=payload, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data['choices'][0]['message']['content'].strip()
                    else:
                        return "–ß—ë-—Ç–æ —è —Ç—É–ø–ª—é... –ù–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑, –∞?"
        except Exception as e:
            logger.error(f"DeepSeek API error: {e}")
            return "–£ –º–µ–Ω—è –ª–∞–ø–∫–∏... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepSeek
deepseek = DeepSeekAPI(DEEPSEEK_API_KEY)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="connect_bot")
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°—É—Å–ª–∏–∫–æ–º.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∫ —Ç–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data == "connect_bot")
async def connect_bot(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789):")
    await state.set_state(AuthStates.waiting_for_phone)
    await callback.answer()

@dp.message(AuthStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    if not phone.startswith('+') or not phone[1:].isdigit() or len(phone) < 10:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789):")
        return
    
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_session = UserSession(user_id)
    user_sessions[user_id] = user_session
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        await user_session.send_code(phone)
        user_phones[user_id] = phone
        
        await message.answer("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:")
        await state.set_state(AuthStates.waiting_for_code)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@dp.message(AuthStates.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    user_id = message.from_user.id
    
    if user_id not in user_sessions:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        await state.clear()
        return
    
    user_session = user_sessions[user_id]
    
    try:
        success, error = await user_session.sign_in(code)
        
        if success:
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º userbot –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            asyncio.create_task(run_userbot(user_session.client, user_id))
            
            active_userbots[user_id] = user_session
            await state.clear()
            
        elif error == "password":
            await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
            await state.set_state(AuthStates.waiting_for_password)
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@dp.message(AuthStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    user_id = message.from_user.id
    
    if user_id not in user_sessions:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        await state.clear()
        return
    
    user_session = user_sessions[user_id]
    
    try:
        success, error = await user_session.sign_in_with_password(password)
        
        if success:
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º userbot –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            asyncio.create_task(run_userbot(user_session.client, user_id))
            
            active_userbots[user_id] = user_session
            await state.clear()
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
            await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ userbot
async def run_userbot(client, user_id):
    """–ó–∞–ø—É—Å–∫ userbot –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    @client.on(events.NewMessage)
    async def handler(event):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if isinstance(event.message, MessageService) or event.message.out:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É .ss –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if event.message.text and event.message.text.startswith('.ss'):
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            chat_id = event.chat_id
            if user_id not in active_chats:
                active_chats[user_id] = set()
            active_chats[user_id].add(chat_id)
            
            await event.reply("–°—É—Å–ª–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üêπ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        if user_id in active_chats and event.chat_id in active_chats[user_id]:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "—á–µ" –Ω–∞ "—á–æ"
            message_text = event.message.text
            if message_text:
                if " —á–µ " in message_text.lower() or message_text.lower().startswith("—á–µ "):
                    corrected_text = message_text.lower().replace(" —á–µ ", " —á–æ ").replace("—á–µ ", "—á–æ ")
                    await event.reply(f"–ò—Å–ø—Ä–∞–≤–ª—è—é: {corrected_text}")
                    return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é DeepSeek
            response = await deepseek.generate_response(message_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await event.reply(response)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    await client.start()
    await client.run_until_disconnected()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
active_chats = {}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
