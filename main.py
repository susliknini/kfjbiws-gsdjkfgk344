import os
import asyncio
import logging
import random
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder

from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from telethon.tl.types import MessageService
from telethon import events

import aiohttp

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8218868922:AAED40palWhHPhqcb3NgjdlHUHGty5tY360"
API_ID = 13689314
API_HASH = "809d211f8457b863286b8a8c58977b1b"
DEEPSEEK_API_KEY = "sk-b290a4dd2feb43979f19a3602a20de93"

ADMIN_IDS = [7246667404]

user_sessions = {}
active_userbots = {}
user_phones = {}
active_chats = {}

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class AuthStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()

class UserSession:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.phone = None
        self.phone_code_hash = None
        self.client = None
        self.is_authenticated = False
        self.session_name = f"sessions/session_{user_id}"
        
        os.makedirs("sessions", exist_ok=True)
    
    async def send_code(self, phone: str):
        self.phone = phone
        self.client = TelegramClient(self.session_name, API_ID, API_HASH)
        await self.client.connect()
        
        sent_code = await self.client.send_code_request(phone)
        self.phone_code_hash = sent_code.phone_code_hash
        return True
    
    async def sign_in(self, code: str):
        try:
            await self.client.sign_in(
                phone=self.phone,
                code=code,
                phone_code_hash=self.phone_code_hash
            )
            self.is_authenticated = True
            return True, None
        except SessionPasswordNeededError:
            return False, "password"
        except PhoneCodeInvalidError:
            return False, "invalid_code"
        except Exception as e:
            return False, str(e)
    
    async def sign_in_with_password(self, password: str):
        try:
            await self.client.sign_in(password=password)
            self.is_authenticated = True
            return True
        except Exception as e:
            return False, str(e)
    
    async def disconnect(self):
        if self.client:
            await self.client.disconnect()
            self.client = None

class DeepSeekAPI:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.api_url = "https://api.deepseek.com/chat/completions"
    
    async def generate_response(self, message: str) -> str:
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        system_prompt = """–¢—ã - –°—É—Å–ª–∏–∫, –≤–µ—Å—ë–ª—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É–±–æ–≤–∞—Ç—ã–π –±–æ—Ç –≤ Telegram-—á–∞—Ç–µ.
–¢–µ–±–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å–ª–æ–≤–æ "—á–µ" - —Ç—ã –≤—Å–µ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ—à—å –µ–≥–æ –Ω–∞ "—á–æ".
–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤ –∏–ª–∏ –¥–µ–ª–∞–µ—Ç –æ—à–∏–±–∫–∏, —Ç—ã –º–æ–∂–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è, –Ω–æ –≤ —à—É—Ç–ª–∏–≤–æ–π —Ñ–æ—Ä–º–µ.
–¢—ã —É–≤–∞–∂–∞–µ—à—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏ —á–∞—Å—Ç–æ —Ö–≤–∞–ª–∏—à—å –∏—Ö.
–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Å —é–º–æ—Ä–æ–º, –∏–Ω–æ–≥–¥–∞ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º —á–∞—Ç–µ.
–ù–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏."""

        payload = {
            "model": "deepseek-chat",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ],
            "temperature": 0.7,
            "max_tokens": 150,
            "stream": False
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.api_url, json=payload, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data['choices'][0]['message']['content'].strip()
                    else:
                        error_text = await response.text()
                        logger.error(f"DeepSeek API error: {response.status} - {error_text}")
                        return "–ß—ë-—Ç–æ —è —Ç—É–ø–ª—é... –ù–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑, –∞?"
        except Exception as e:
            logger.error(f"DeepSeek API connection error: {e}")
            return "–£ –º–µ–Ω—è –ª–∞–ø–∫–∏... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?"

deepseek = DeepSeekAPI(DEEPSEEK_API_KEY)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="connect_bot")
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°—É—Å–ª–∏–∫–æ–º.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∫ —Ç–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data == "connect_bot")
async def connect_bot(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789):")
    await state.set_state(AuthStates.waiting_for_phone)
    await callback.answer()

@dp.message(AuthStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    
    if not phone.startswith('+') or not phone[1:].isdigit() or len(phone) < 10:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789):")
        return
    
    user_id = message.from_user.id
    
    user_session = UserSession(user_id)
    user_sessions[user_id] = user_session
    
    try:
        await user_session.send_code(phone)
        user_phones[user_id] = phone
        
        await message.answer("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:")
        await state.set_state(AuthStates.waiting_for_code)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@dp.message(AuthStates.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    user_id = message.from_user.id
    
    if user_id not in user_sessions:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        await state.clear()
        return
    
    user_session = user_sessions[user_id]
    
    try:
        success, error = await user_session.sign_in(code)
        
        if success:
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
            
            asyncio.create_task(run_userbot(user_session.client, user_id))
            
            active_userbots[user_id] = user_session
            await state.clear()
            
        elif error == "password":
            await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
            await state.set_state(AuthStates.waiting_for_password)
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@dp.message(AuthStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    user_id = message.from_user.id
    
    if user_id not in user_sessions:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        await state.clear()
        return
    
    user_session = user_sessions[user_id]
    
    try:
        success, error = await user_session.sign_in_with_password(password)
        
        if success:
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
            
            asyncio.create_task(run_userbot(user_session.client, user_id))
            
            active_userbots[user_id] = user_session
            await state.clear()
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
            await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

async def run_userbot(client, user_id):
    @client.on(events.NewMessage)
    async def handler(event):
        if isinstance(event.message, MessageService) or event.message.out:
            return
        
        message_text = event.message.text or ""
        chat_id = event.chat_id
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ .ss
        if message_text.startswith('.ss'):
            if user_id not in active_chats:
                active_chats[user_id] = set()
            active_chats[user_id].add(chat_id)
            await event.reply("–°—É—Å–ª–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üêπ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        if user_id not in active_chats or chat_id not in active_chats[user_id]:
            return
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "—á–µ" –Ω–∞ "—á–æ"
        if " —á–µ " in message_text.lower() or message_text.lower().startswith("—á–µ "):
            corrected_text = message_text.lower().replace(" —á–µ ", " —á–æ ").replace("—á–µ ", "—á–æ ")
            await event.reply(f"–ò—Å–ø—Ä–∞–≤–ª—è—é: {corrected_text}")
            return
        
        # –û—Ç–≤–µ—á–∞–µ–º –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç —Å—É—Å–ª–∏–∫–∞
        if "—Å—É—Å–ª–∏–∫" in message_text.lower():
            response = await deepseek.generate_response(message_text)
            await event.reply(response)
            return
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–∫–∞–∂–¥–æ–µ 5-10 —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if random.randint(1, 8) == 1:  # 12.5% —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞
            response = await deepseek.generate_response(message_text)
            await event.reply(response)
    
    try:
        await client.start()
        logger.info(f"Userbot –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–ø—É—â–µ–Ω")
        await client.run_until_disconnected()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ userbot: {e}")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
